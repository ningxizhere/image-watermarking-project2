### Project2：基于LSB数字水印的图片泄露检测系统

#### 1. 项目目标

本项目旨在开发一个基于C++的数字水印工具，实现以下核心功能：

1. **水印嵌入 (Embed):** 将一段指定的文本信息作为数字水印，通过最低有效位（LSB）算法嵌入到一张BMP格式的图片中，生成一张带水印的图片。
2. **水印提取 (Extract):** 从一张带水印的图片中，提取出隐藏的文本信息。
3. **鲁棒性测试 (Test):** 对带水印的图片施加一系列常见的图像处理攻击（如翻转、裁剪、亮度/对比度调整等），并评估在这些攻击下水印信息是否还能被成功提取。

通过本项目，可以深入理解LSB数字水印的原理、实现细节及其在实际应用中的优缺点，特别是其在鲁棒性方面的脆弱性。

#### 2. 技术原理

本项目采用**最低有效位（Least Significant Bit, LSB）**隐写术。

该技术通过**修改图像像素颜色分量（RGB）的最低一个比特位**来**嵌入信息。**

##### 嵌入过程：

1. 将需要嵌入的文本信息转换为二进制比特流。
2. 在文本流的末尾添加一个特殊的结束标记（如一串连续的0）。
3. 按顺序遍历图像的每个像素的每个颜色通道（R, G, B）。
4. 将每个颜色通道值的最低位替换为信息比特流中的对应比特。
5. 当信息全部嵌入后，保存修改后的图像。

##### 提取过程：

1. 按相同顺序遍历带水印图像的像素及其颜色通道。
2. 提取每个颜色通道值的最低有效位。
3. 将提取出的比特流重新组合。
4. 当检测到结束标记时，停止提取，并将组合好的比特流转换回文本。

#### 3. 环境依赖与编译

##### 依赖库：**CImg Library——**一个强大的C++图像处理库。

##### 编译指令

本项目代码已整合到一个文件中 `src/digital_watermark.cpp`。

```bash
g++ digital_watermark.cpp -o build\Debug\outDebug -O2 -lm -lpthread -I../include
```

#### 4.文件结构

```bash
image-watermarking-project2/
├── images/                 # 存放原始图片、水印图片和测试图片
│   └── original.png        # 示例原始图片
├── output/                 # 存放嵌入水印后和经过攻击后的图片
├── src/                    # 存放源代码
│   └── digital_watermark.cpp
├── include/                # 存放头文件
│   └── CImg.h
├── docs/                   # 存放项目说明文档
│   └── digital_watermarking_report.md
├── README.md               # 项目总说明
```

